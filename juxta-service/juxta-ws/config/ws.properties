juxta.ws.db.host=localhost
juxta.ws.db.user=juxta
juxta.ws.db.password=JuxtaWSl0g1n!
juxta.ws.port=8182

# Use these to set up basic http authentication for the service
juxta.enable.authenticator=false
juxta.authenticator.user=
juxta.authenticator.password=

# Determine if juxta will attempt to capture usage metrics
juxta.captureMetrics=false

# Control how many hours a cached visualization is held
juxta.cache.lifespan=8

# Used to control the concurrency within the web service.
# Collations require more resources and use a separate thread
# pool for simultaneous requests. This pool should be small.
# All other requests are less intensive and can handle higher
# levels of concurrency.
juxta.concurrent.collations=5
juxta.concurrent.tasks=15

# lucene configuration
juxta.lucene.indexDir=lucene-index
juxta.lucene.hitsPerPage=5
juxta.lucene.fragSize=30
juxta.lucene.phraseSlop=10

# use this to limit max size of raw sources accepted. 
# Value is in bytes. Specify -1 for no limits. 
# Default is 1M
juxta.source.max=1048576

# limit the number of witnesses allowable in a set
juxta.set.maxWitnesses=15

# This is the average size of alignments. Calculated by examining
# memory footprints during alignment gets of sets with ranges
# of alignment counts. This data is reported in the logs. Check it,
# and adjust value if averages are found to be very different than this.
# This number helps determine if the server has enough memory to
# generate a visualization. If it is too low, the server will
# get out of memory exceptions during visualization rendering.
juxta.alignment.size=4000

# Set the db batch sizes for tokenization and collation
# use these to tune how much memory is consumed during each process.
# Note that the collation process itself is very memory intensive, so
# the batches of alignments it holds in memory need to be smaller
juxta.tokenization.batch=10000
juxta.collation.batch=5000
juxta.visualization.batch=10000

# flag to control colorized side-by-side
juxta.sidebyside.multicolor=false

